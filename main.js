"use strict";
// JS Assessment: Find Your Hat //
import promptSync from "prompt-sync";
import clear from "clear-screen";

const prompt = promptSync({ sigint: true });
const hat = "üëí";
const hole = "‚ö´";
const fieldCharacter = "üü©";
const pathCharacter = "üë£";

class Field {
	constructor(field = [[]]) {
		this.field = field;
    this.positionRow = 0;
    this.positionCol = 0;
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á object
    this.findStartPosition();
	}

  //‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö paramerter ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ñ‡∏∑‡∏≠ field
  findStartPosition() {
    for (let y = 0; y < this.field.length; y++) {
      for (let x = 0; x < this.field[y].length; x++) {
        if (this.field[y][x] === pathCharacter) {
          this.positionRow = y;
          this.positionCol = x;
          return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        }
      }
    }
  }
  playGame(){
    let playing = true;
    while (playing){
      this.print()
      this.askQuestion();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!this.isInBounds()){
        console.log('You moved out of bounds! Game over. üò≠üíÄ');
        playing = false;
        continue;  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
      }

      const currentTile = this.field[this.positionRow][this.positionCol];

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ/‡∏ä‡∏ô‡∏∞
      if (currentTile === hole){
          console.log('Oops! You fell into a hole. üòµ Game over.');
          playing = false;
      } else if (currentTile === hat){
          console.log('üéâ Hooray! You found your hat! You win! ü•≥');
          playing = false;
      } else {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        this.field[this.positionRow][this.positionCol] = pathCharacter;
      }
    }
  }

  moveUp() { this.positionRow -= 1; }
  moveDown() { this.positionRow += 1; }
  moveLeft() { this.positionCol -= 1; }
  moveRight() { this.positionCol += 1; }

  askQuestion () {
    let isValidInput = false;
    do {
      const answer = prompt('Which way? (left(A), right(D), up(W), down(S): ').toLowerCase();
      switch (answer){
        case 'a': this.moveLeft(); isValidInput = true; break;
        case 'd': this.moveRight(); isValidInput = true; break;
        case 'w': this.moveUp(); isValidInput = true; break;
        case 's': this.moveDown(); isValidInput = true; break;
        default: console.log('Invalid key. Please use A, D, W, or S.'); break;
      }
    } while (!isValidInput);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isInBounds (){
    return (
      this.positionCol >= 0 &&
      this.positionRow >= 0 &&
      this.positionCol < this.field[0].length &&
      this.positionRow < this.field.length
    );
  }

  print() {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ console ‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    clear();
    const displayString = this.field.map(row => row.join('')).join('\n');
    console.log(displayString);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô static ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô
  static generateField(height, width, percentage = 0.2){
    //‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà "‡∏´‡∏°‡∏ß‡∏Å" ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢ "‡∏´‡∏•‡∏∏‡∏°" ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏ô‡∏∞‡πÑ‡∏î‡πâ
    //‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ö‡πà‡∏á Level ‡∏ï‡∏≤‡∏° percentage ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
    const field = new Array(height).fill(0).map(()=>new Array(width));
    for (let y = 0; y < height; y++){
      for (let x = 0 ; x < width ; x++){
        const prob = Math.random();
        field[y][x] = prob > percentage ? fieldCharacter : hole;
      }
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á "‡∏´‡∏°‡∏ß‡∏Å" ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ
    const hatLocation = {
      x: Math.floor(Math.random() * width),
      y: Math.floor(Math.random() * height)
    };
    field[hatLocation.y][hatLocation.x] = hat;

    // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á player ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ
   let startRow, startCol;
    do {
      startRow = Math.floor(Math.random() * height);
      startCol = Math.floor(Math.random() * width);
    } while (
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏•‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏Å
      field[startRow][startCol] === hole ||
      field[startRow][startCol] === hat
    );
    field[startRow][startCol] = pathCharacter;

    return field;
  }

}

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ---
const myField = new Field(Field.generateField(10, 10, 0.2));
myField.playGame();
